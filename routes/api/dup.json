{"duplicates":[{"lines":7,"tokens":72,"firstFile":{"start":26,"name":"/Users/nune/Desktop/backend-server/AndonProj/routes/api/code/pythonScript/andon-monitor/monitor.py"},"secondFile":{"start":39,"name":"/Users/nune/Desktop/backend-server/AndonProj/routes/api/code/pythonScript/andon-monitor/monitor.py"},"fragment":"def gitInfo():\n    for fontname, size in [(&quot;miscfs_.ttf&quot;, 12)]:\n        font = make_font(fontname, size) if fontname else None\n        term = terminal(device, font)\n        term.println(&quot;    Andon Monitor&quot;)\n        term.println(&quot;---------------------&quot;)\n        term.println(&quot;Gitname : littlenune&quot;)\n        term.println(&quot;Reponame : Andonproj&quot;)"},{"lines":7,"tokens":74,"firstFile":{"start":39,"name":"/Users/nune/Desktop/backend-server/AndonProj/routes/api/code/pythonScript/andon-monitor/monitor.py"},"secondFile":{"start":51,"name":"/Users/nune/Desktop/backend-server/AndonProj/routes/api/code/pythonScript/andon-monitor/monitor.py"},"fragment":"def overallHealthInfo(score):\n    for fontname, size in [(&quot;miscfs_.ttf&quot;, 12)]:\n        font = make_font(fontname, size) if fontname else None\n        term = terminal(device, font)\n        term.println(&quot;    Andon Monitor&quot;)\n        term.println(&quot;---------------------&quot;)\n        term.println(&quot;Overallhealth : %s&quot; % score)\n        term.puts(&quot;---------------------&quot;)"},{"lines":7,"tokens":74,"firstFile":{"start":39,"name":"/Users/nune/Desktop/backend-server/AndonProj/routes/api/code/pythonScript/andon-monitor/monitor.py"},"secondFile":{"start":63,"name":"/Users/nune/Desktop/backend-server/AndonProj/routes/api/code/pythonScript/andon-monitor/monitor.py"},"fragment":"def overallHealthInfo(score):\n    for fontname, size in [(&quot;miscfs_.ttf&quot;, 12)]:\n        font = make_font(fontname, size) if fontname else None\n        term = terminal(device, font)\n        term.println(&quot;    Andon Monitor&quot;)\n        term.println(&quot;---------------------&quot;)\n        term.println(&quot;Overallhealth : %s&quot; % score)\n        term.puts(&quot;---------------------&quot;)"},{"lines":7,"tokens":74,"firstFile":{"start":39,"name":"/Users/nune/Desktop/backend-server/AndonProj/routes/api/code/pythonScript/andon-monitor/monitor.py"},"secondFile":{"start":75,"name":"/Users/nune/Desktop/backend-server/AndonProj/routes/api/code/pythonScript/andon-monitor/monitor.py"},"fragment":"def overallHealthInfo(score):\n    for fontname, size in [(&quot;miscfs_.ttf&quot;, 12)]:\n        font = make_font(fontname, size) if fontname else None\n        term = terminal(device, font)\n        term.println(&quot;    Andon Monitor&quot;)\n        term.println(&quot;---------------------&quot;)\n        term.println(&quot;Overallhealth : %s&quot; % score)\n        term.puts(&quot;---------------------&quot;)"},{"lines":7,"tokens":74,"firstFile":{"start":39,"name":"/Users/nune/Desktop/backend-server/AndonProj/routes/api/code/pythonScript/andon-monitor/monitor.py"},"secondFile":{"start":87,"name":"/Users/nune/Desktop/backend-server/AndonProj/routes/api/code/pythonScript/andon-monitor/monitor.py"},"fragment":"def overallHealthInfo(score):\n    for fontname, size in [(&quot;miscfs_.ttf&quot;, 12)]:\n        font = make_font(fontname, size) if fontname else None\n        term = terminal(device, font)\n        term.println(&quot;    Andon Monitor&quot;)\n        term.println(&quot;---------------------&quot;)\n        term.println(&quot;Overallhealth : %s&quot; % score)\n        term.puts(&quot;---------------------&quot;)"},{"lines":17,"tokens":187,"firstFile":{"start":107,"name":"/Users/nune/Desktop/backend-server/AndonProj/routes/api/code/pythonScript/andon-monitor/monitor.py"},"secondFile":{"start":78,"name":"/Users/nune/Desktop/backend-server/AndonProj/routes/api/code/pythonScript/script.py"},"fragment":"        term.clear()\n\n# Main program logic follows:\nif __name__ == &#x27;__main__&#x27;:\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(&#x27;-c&#x27;, &#x27;--clear&#x27;, action=&#x27;store_true&#x27;, help=&#x27;clear the display on exit&#x27;)\n    parser.add_argument(&#x27;-wel&#x27;, &#x27;--welcome&#x27;, action=&#x27;store_true&#x27;, help=&#x27;welcome light&#x27;)\n    parser.add_argument(&#x27;-ol&#x27;, &#x27;--overall&#x27;, type=int ,help=&#x27;overall health value&#x27;)\n    parser.add_argument(&#x27;-bug&#x27;,&#x27;--bugspot&#x27;, type=int ,help=&#x27;bugspot value&#x27;)\n    parser.add_argument(&#x27;-comp&#x27;, &#x27;--complexity&#x27;, type=int ,help=&#x27;complexity value&#x27;)\n    parser.add_argument(&#x27;-dup&#x27;, &#x27;--duplication&#x27;,type=int ,help=&#x27;duplication value&#x27;)\n    parser.add_argument(&#x27;-od&#x27;,&#x27;--outdated&#x27;, type=int ,help=&#x27;outdated value&#x27;)\n    parser.add_argument(&#x27;-fq&#x27;, &#x27;--frequency&#x27;,type=int ,help=&#x27;frequency of commits value&#x27;)\n\n    args = parser.parse_args()\n\n    serial = i2c(port=1, address=0x3C)"}],"statistics":{"clones":6,"duplications":52,"files":2,"percentage":"1.61","lines":3223}}